import xlwings as xw
import yaml
import time
from selenium import webdriver
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import logging

wb = None

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def column_letter_to_index(letter):
    """Convert a column letter to its numerical index."""
    index = 0
    for char in letter:
        index = index * 26 + (ord(char.upper()) - ord('A')) + 1
    return index

def create_driver():
    """Initialize the Edge WebDriver with options."""
    try:
        options = EdgeOptions()
        driver = webdriver.Edge(options=options)
        logging.info("Edge WebDriver initialized successfully.")
        return driver
    except WebDriverException as e:
        logging.error(f"Failed to initialize Edge WebDriver: {e}")
        raise

def login(driver, url, username, password):
    """Log into the specified URL using provided credentials."""
    try:
        driver.get(url)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'usernameField'))).send_keys(username)
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'passwordField'))).send_keys(password)
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, 'SubmitButton'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, '51467:702:-1:0'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, '51467:702:67606:0'))).click()
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, 'Items'))).click()
        logging.info("Logged in successfully.")
    except TimeoutException as e:
        logging.error(f"Timeout during login: {e}")
        raise
    except NoSuchElementException as e:
        logging.error(f"Login element not found: {e}")
        raise

        # click mapping with no identifier using API
    # from selenium import webdriver
    # from selenium.webdriver.common.action_chains import ActionChains
    # browser = webdriver.Chrome()
    # elem = browser.find_element_by_selector(".some > selector")
    # ac = ActionChains(browser)
    # ac.move_to_element(elem).move_by_offset(x_offset, y_offset).click().perform()

# def path_to_update(driver):
#     WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, '51467:702:-1:0'))).click()
#     WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, '51467:702:67606:0'))).click()
#     WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.ID, 'Items'))).click()
    
def perform_searches(selected_range):
    """Perform searches based on the selected range from the Excel file."""
    if not selected_range:
        logging.error("Selected range is empty.")
        return

    # Load login details from YAML file
    try:
        with open(r'C:\Users\610161178\Downloads\Code\website_login\loginDetails.yml') as file:
            conf = yaml.load(file, Loader=yaml.SafeLoader)
        myAssentUsername = conf['oracle_user']['email']
        myAssentPassword = conf['oracle_user']['password']
    except FileNotFoundError as e:
        logging.error(f"Login details file not found: {e}")
        return

    driver = webdriver.Edge()
    target_url = "http://prod.motionoracle.com:8000/OA_HTML/RF.jsp?function_id=31581&resp_id=-1&resp_appl_id=-1&security_group_id=0&lang_code=US&params=5j0bzUgs9j2gsy7f2IhOgr-7x5nWRx63YDVSeM1o2-M"

    try:
        login(driver, target_url, myAssentUsername, myAssentPassword)
    except Exception as e:
        logging.error(f"Failed to login: {e}")
        driver.quit()
        return

    if "!" in selected_range:
        sheet_name, cell_range = selected_range.split("!")
    else:
        sheet_name = None
        cell_range = selected_range

    start, end = cell_range.split(":")
    start_row = int(''.join(filter(str.isdigit, start)))
    end_row = int(''.join(filter(str.isdigit, end)))
    start_col = ''.join(filter(str.isalpha, start))
    col_index = column_letter_to_index(start_col)

    wb = xw.Book(r'C:\Users\610161178\Downloads\current_pec_review.xlsm')
    if sheet_name:
        sheet = wb.sheets[sheet_name]
    else:
        sheet = wb.sheets.active

    for current_row in range(start_row, end_row):
        cell_value = sheet.range((current_row, col_index)).value
        if cell_value is not None:
            query = str(cell_value)

    driver.quit()

# Set the duration in seconds after which the program will quit
DURATION = 70  # seconds

# Read the selected range from the text file
selected_range_file = r'C:\Users\610161178\Downloads\Code\selected_range.txt'
with open(selected_range_file, "r") as file:
    selected_range = file.readline().strip()

# Perform searches using the selected range
perform_searches(selected_range)

# Pause the program for the specified duration before quitting
time.sleep(DURATION)